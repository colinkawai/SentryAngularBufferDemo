{"version":3,"file":"sentry-angular.mjs","sources":["../../src/flags.ts","../../src/sdk.ts","../../src/zone.ts","../../src/errorhandler.ts","../../src/constants.ts","../../src/tracing.ts","../../src/sentry-angular.ts"],"sourcesContent":["/*\n * This file defines flags and constants that can be modified during compile time in order to facilitate tree shaking\n * for users.\n *\n * We define \"magic strings\" like `__SENTRY_DEBUG__` that may get replaced with actual values during our, or the user's\n * build process. Take care when introducing new flags - they must not throw if they are not replaced. See the Debug\n * Build Flags section in CONTRIBUTING.md.\n */\n\ndeclare const __SENTRY_DEBUG__: boolean;\n\n/** Flag that is true for debug builds, false otherwise. */\nexport const IS_DEBUG_BUILD = typeof __SENTRY_DEBUG__ === 'undefined' ? true : __SENTRY_DEBUG__;\n","import { VERSION } from '@angular/core';\nimport type { BrowserOptions } from '@sentry/browser';\nimport {\n  breadcrumbsIntegration,\n  browserSessionIntegration,\n  globalHandlersIntegration,\n  httpContextIntegration,\n  init as browserInit,\n  linkedErrorsIntegration,\n  setContext,\n} from '@sentry/browser';\nimport type { Client, Integration } from '@sentry/core';\nimport {\n  applySdkMetadata,\n  debug,\n  dedupeIntegration,\n  functionToStringIntegration,\n  inboundFiltersIntegration,\n} from '@sentry/core';\nimport { IS_DEBUG_BUILD } from './flags';\n\n/**\n * Get the default integrations for the Angular SDK.\n */\nexport function getDefaultIntegrations(_options: BrowserOptions = {}): Integration[] {\n  // Don't include the BrowserApiErrors integration as it interferes with the Angular SDK's `ErrorHandler`:\n  // BrowserApiErrors would catch certain errors before they reach the `ErrorHandler` and\n  // thus provide a lower fidelity error than what `SentryErrorHandler`\n  // (see errorhandler.ts) would provide.\n  //\n  // see:\n  //  - https://github.com/getsentry/sentry-javascript/issues/5417#issuecomment-1453407097\n  //  - https://github.com/getsentry/sentry-javascript/issues/2744\n  return [\n    // TODO(v11): Replace with `eventFiltersIntegration` once we remove the deprecated `inboundFiltersIntegration`\n    // eslint-disable-next-line deprecation/deprecation\n    inboundFiltersIntegration(),\n    functionToStringIntegration(),\n    breadcrumbsIntegration(),\n    globalHandlersIntegration(),\n    linkedErrorsIntegration(),\n    dedupeIntegration(),\n    httpContextIntegration(),\n    browserSessionIntegration(),\n  ];\n}\n\n/**\n * Inits the Angular SDK\n */\nexport function init(options: BrowserOptions): Client | undefined {\n  const opts = {\n    defaultIntegrations: getDefaultIntegrations(),\n    ...options,\n  };\n\n  applySdkMetadata(opts, 'angular');\n\n  checkAndSetAngularVersion();\n  return browserInit(opts);\n}\n\nfunction checkAndSetAngularVersion(): void {\n  const ANGULAR_MINIMUM_VERSION = 14;\n\n  const angularVersion = VERSION?.major && parseInt(VERSION.major, 10);\n\n  if (angularVersion) {\n    if (angularVersion < ANGULAR_MINIMUM_VERSION) {\n      IS_DEBUG_BUILD &&\n        debug.warn(\n          `This Sentry SDK does not officially support Angular ${angularVersion}.`,\n          `This SDK only supports Angular ${ANGULAR_MINIMUM_VERSION} and above.`,\n          \"If you're using lower Angular versions, check the Angular Version Compatibility table in our docs: https://docs.sentry.io/platforms/javascript/guides/angular/#angular-version-compatibility.\",\n          'Otherwise, please consider upgrading your Angular version.',\n        );\n    }\n    setContext('angular', { version: angularVersion });\n  }\n}\n","// This would be exposed in the global environment whenever `zone.js` is\n// included in the `polyfills` configuration property. Starting from Angular 17,\n// users can opt-in to use zoneless change detection.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Zone: any;\n\n// In Angular 17 and future versions, zoneless support is forthcoming.\n// Therefore, it's advisable to safely check whether the `run` function is\n// available in the `<root>` context.\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst isNgZoneEnabled = typeof Zone !== 'undefined' && Zone.root?.run;\n\n/**\n * The function that does the same job as `NgZone.runOutsideAngular`.\n *\n * ⚠️ Note: All of the Sentry functionality called from inside the Angular\n * execution context must be wrapped in this function. Angular's rendering\n * relies on asynchronous tasks being scheduled within its execution context.\n * Since Sentry schedules tasks that do not interact with Angular's rendering,\n * it may prevent Angular from functioning reliably. Consequently, it may disrupt\n * processes such as server-side rendering or client-side hydration.\n */\nexport function runOutsideAngular<T>(callback: () => T): T {\n  // Running the `callback` within the root execution context enables Angular\n  // processes (such as SSR and hydration) to continue functioning normally without\n  // timeouts and delays that could affect the user experience. This approach is\n  // necessary because some of the Sentry functionality continues to run in the background.\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return isNgZoneEnabled ? Zone.root.run(callback) : callback();\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport type { ErrorHandler as AngularErrorHandler, OnDestroy } from '@angular/core';\nimport { Inject, Injectable } from '@angular/core';\nimport type { ReportDialogOptions } from '@sentry/browser';\nimport * as Sentry from '@sentry/browser';\nimport type { Event } from '@sentry/core';\nimport { consoleSandbox, isString } from '@sentry/core';\nimport { runOutsideAngular } from './zone';\n\n/**\n * Options used to configure the behavior of the Angular ErrorHandler.\n */\nexport interface ErrorHandlerOptions {\n  logErrors?: boolean;\n  showDialog?: boolean;\n  dialogOptions?: ReportDialogOptions;\n  /**\n   * Custom implementation of error extraction from the raw value captured by the Angular.\n   * @param error Value captured by Angular's ErrorHandler provider\n   * @param defaultExtractor Default implementation that can be used as the fallback in case of custom implementation\n   */\n  extractor?(error: unknown, defaultExtractor: (error: unknown) => unknown): unknown;\n}\n\n// https://github.com/angular/angular/blob/master/packages/core/src/util/errors.ts\nfunction tryToUnwrapZonejsError(error: unknown): unknown | Error {\n  // TODO: once Angular14 is the minimum requirement ERROR_ORIGINAL_ERROR and\n  //  getOriginalError from error.ts can be used directly.\n  return error && (error as { ngOriginalError: Error }).ngOriginalError\n    ? (error as { ngOriginalError: Error }).ngOriginalError\n    : error;\n}\n\nfunction extractHttpModuleError(error: HttpErrorResponse): string | Error {\n  // The `error` property of http exception can be either an `Error` object, which we can use directly...\n  if (isErrorOrErrorLikeObject(error.error)) {\n    return error.error;\n  }\n\n  // ... or an`ErrorEvent`, which can provide us with the message but no stack...\n  // guarding `ErrorEvent` against `undefined` as it's not defined in Node environments\n  if (typeof ErrorEvent !== 'undefined' && error.error instanceof ErrorEvent && error.error.message) {\n    return error.error.message;\n  }\n\n  // ...or the request body itself, which we can use as a message instead.\n  if (typeof error.error === 'string') {\n    return `Server returned code ${error.status} with body \"${error.error}\"`;\n  }\n\n  // If we don't have any detailed information, fallback to the request message itself.\n  return error.message;\n}\n\ntype ErrorCandidate = {\n  name?: unknown;\n  message?: unknown;\n  stack?: unknown;\n};\n\nfunction isErrorOrErrorLikeObject(value: unknown): value is Error {\n  if (value instanceof Error) {\n    return true;\n  }\n\n  if (value === null || typeof value !== 'object') {\n    return false;\n  }\n\n  const candidate = value as ErrorCandidate;\n\n  return (\n    isString(candidate.name) &&\n    isString(candidate.message) &&\n    (undefined === candidate.stack || isString(candidate.stack))\n  );\n}\n\n/**\n * Implementation of Angular's ErrorHandler provider that can be used as a drop-in replacement for the stock one.\n */\n@Injectable({ providedIn: 'root' })\nclass SentryErrorHandler implements AngularErrorHandler, OnDestroy {\n  protected readonly _options: ErrorHandlerOptions;\n\n  /** The cleanup function is executed when the injector is destroyed. */\n  private _removeAfterSendEventListener?: () => void;\n\n  public constructor(@Inject('errorHandlerOptions') options?: ErrorHandlerOptions) {\n    this._options = {\n      logErrors: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Method executed when the injector is destroyed.\n   */\n  public ngOnDestroy(): void {\n    if (this._removeAfterSendEventListener) {\n      this._removeAfterSendEventListener();\n    }\n  }\n\n  /**\n   * Method called for every value captured through the ErrorHandler\n   */\n  public handleError(error: unknown): void {\n    const extractedError = this._extractError(error) || 'Handled unknown error';\n\n    // Capture handled exception and send it to Sentry.\n    const eventId = runOutsideAngular(() =>\n      Sentry.captureException(extractedError, {\n        mechanism: { type: 'auto.function.angular.error_handler', handled: false },\n      }),\n    );\n\n    // When in development mode, log the error to console for immediate feedback.\n    if (this._options.logErrors) {\n      // eslint-disable-next-line no-console\n      consoleSandbox(() => console.error(extractedError));\n    }\n\n    // Optionally show user dialog to provide details on what happened.\n    if (this._options.showDialog) {\n      const client = Sentry.getClient();\n\n      if (client && !this._removeAfterSendEventListener) {\n        this._removeAfterSendEventListener = client.on('afterSendEvent', (event: Event) => {\n          if (!event.type && event.event_id) {\n            runOutsideAngular(() => {\n              Sentry.showReportDialog({ ...this._options.dialogOptions, eventId: event.event_id });\n            });\n          }\n        });\n      } else if (!client) {\n        runOutsideAngular(() => {\n          Sentry.showReportDialog({ ...this._options.dialogOptions, eventId });\n        });\n      }\n    }\n  }\n\n  /**\n   * Used to pull a desired value that will be used to capture an event out of the raw value captured by ErrorHandler.\n   */\n  protected _extractError(error: unknown): unknown {\n    // Allow custom overrides of extracting function\n    if (this._options.extractor) {\n      const defaultExtractor = this._defaultExtractor.bind(this);\n      return this._options.extractor(error, defaultExtractor);\n    }\n\n    return this._defaultExtractor(error);\n  }\n\n  /**\n   * Default implementation of error extraction that handles default error wrapping, HTTP responses, ErrorEvent and few other known cases.\n   */\n  protected _defaultExtractor(errorCandidate: unknown): unknown {\n    const error = tryToUnwrapZonejsError(errorCandidate);\n\n    // If it's http module error, extract as much information from it as we can.\n    if (error instanceof HttpErrorResponse) {\n      return extractHttpModuleError(error);\n    }\n\n    // We can handle messages and Error objects directly.\n    if (typeof error === 'string' || isErrorOrErrorLikeObject(error)) {\n      return error;\n    }\n\n    // Nothing was extracted, fallback to default error message.\n    return null;\n  }\n}\n\n/**\n * Factory function that creates an instance of a preconfigured ErrorHandler provider.\n */\nfunction createErrorHandler(config?: ErrorHandlerOptions): SentryErrorHandler {\n  return new SentryErrorHandler(config);\n}\n\nexport { createErrorHandler, SentryErrorHandler };\n","export const ANGULAR_ROUTING_OP = 'ui.angular.routing';\n\nexport const ANGULAR_INIT_OP = 'ui.angular.init';\n\nexport const ANGULAR_OP = 'ui.angular';\n","import type { AfterViewInit, OnDestroy, OnInit } from '@angular/core';\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nimport { ElementRef } from '@angular/core';\nimport { Directive, Injectable, Input, NgModule } from '@angular/core';\nimport type { ActivatedRouteSnapshot, Event, RouterState } from '@angular/router';\n// Duplicated import to work around a TypeScript bug where it'd complain that `Router` isn't imported as a type.\n// We need to import it as a value to satisfy Angular dependency injection. So:\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nimport { NavigationCancel, NavigationError, Router } from '@angular/router';\nimport { NavigationEnd, NavigationStart, ResolveEnd } from '@angular/router';\nimport {\n  browserTracingIntegration as originalBrowserTracingIntegration,\n  getActiveSpan,\n  getClient,\n  getCurrentScope,\n  getRootSpan,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  spanToJSON,\n  startBrowserTracingNavigationSpan,\n  startInactiveSpan,\n} from '@sentry/browser';\nimport type { Integration, Span } from '@sentry/core';\nimport { debug, stripUrlQueryAndFragment, timestampInSeconds } from '@sentry/core';\nimport type { Observable } from 'rxjs';\nimport { Subscription } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\nimport { ANGULAR_INIT_OP, ANGULAR_OP, ANGULAR_ROUTING_OP } from './constants';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { runOutsideAngular } from './zone';\n\nlet instrumentationInitialized: boolean;\n\n/**\n * A custom browser tracing integration for Angular.\n *\n * Use this integration in combination with `TraceService`\n */\nexport function browserTracingIntegration(\n  options: Parameters<typeof originalBrowserTracingIntegration>[0] = {},\n): Integration {\n  // If the user opts out to set this up, we just don't initialize this.\n  // That way, the TraceService will not actually do anything, functionally disabling this.\n  if (options.instrumentNavigation !== false) {\n    instrumentationInitialized = true;\n  }\n\n  return originalBrowserTracingIntegration({\n    ...options,\n    instrumentNavigation: false,\n  });\n}\n\n/**\n * This function is extracted to make unit testing easier.\n */\nexport function _updateSpanAttributesForParametrizedUrl(route: string, span?: Span): void {\n  const attributes = (span && spanToJSON(span).data) || {};\n\n  if (span && attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] === 'url') {\n    span.updateName(route);\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'route');\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, `auto.${spanToJSON(span).op}.angular`);\n  }\n}\n\n/**\n * Angular's Service responsible for hooking into Angular Router and tracking current navigation process.\n * Creates a new transaction for every route change and measures a duration of routing process.\n */\n@Injectable({ providedIn: 'root' })\nexport class TraceService implements OnDestroy {\n  public navStart$: Observable<Event> = this._router.events.pipe(\n    filter((event): event is NavigationStart => event instanceof NavigationStart),\n    tap(navigationEvent => {\n      if (!instrumentationInitialized) {\n        IS_DEBUG_BUILD &&\n          debug.error('Angular integration has tracing enabled, but Tracing integration is not configured');\n        return;\n      }\n\n      if (this._routingSpan) {\n        this._routingSpan.end();\n        this._routingSpan = null;\n      }\n\n      const client = getClient();\n      const strippedUrl = stripUrlQueryAndFragment(navigationEvent.url);\n\n      if (client) {\n        // see comment in `_isPageloadOngoing` for rationale\n        if (!this._isPageloadOngoing()) {\n          runOutsideAngular(() => {\n            startBrowserTracingNavigationSpan(client, {\n              name: strippedUrl,\n              attributes: {\n                [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.navigation.angular',\n                [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'url',\n              },\n            });\n          });\n        } else {\n          // The first time we end up here, we set the pageload flag to false\n          // Subsequent navigations are going to get their own navigation root span\n          // even if the pageload root span is still ongoing.\n          this._pageloadOngoing = false;\n        }\n\n        this._routingSpan =\n          runOutsideAngular(() =>\n            startInactiveSpan({\n              name: `${navigationEvent.url}`,\n              op: ANGULAR_ROUTING_OP,\n              attributes: {\n                [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.ui.angular',\n                [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'url',\n                url: strippedUrl,\n                ...(navigationEvent.navigationTrigger && {\n                  navigationTrigger: navigationEvent.navigationTrigger,\n                }),\n              },\n            }),\n          ) || null;\n\n        return;\n      }\n    }),\n  );\n\n  // The ResolveEnd event is fired when the Angular router has resolved the URL and\n  // the parameter<->value mapping. It holds the new resolved router state with\n  // the mapping and the new URL.\n  // Only After this event, the route is activated, meaning that the transaction\n  // can be updated with the parameterized route name before e.g. the route's root\n  // component is initialized. This should be early enough before outgoing requests\n  // are made from the new route, with the exceptions of requests being made during\n  // a navigation.\n  public resEnd$: Observable<Event> = this._router.events.pipe(\n    filter((event): event is ResolveEnd => event instanceof ResolveEnd),\n    tap(event => {\n      const route = getParameterizedRouteFromSnapshot(\n        (event.state as unknown as RouterState & { root: ActivatedRouteSnapshot }).root,\n      );\n\n      if (route) {\n        getCurrentScope().setTransactionName(route);\n      }\n\n      const activeSpan = getActiveSpan();\n      const rootSpan = activeSpan && getRootSpan(activeSpan);\n\n      _updateSpanAttributesForParametrizedUrl(route, rootSpan);\n    }),\n  );\n\n  public navEnd$: Observable<Event> = this._router.events.pipe(\n    filter(\n      event => event instanceof NavigationEnd || event instanceof NavigationCancel || event instanceof NavigationError,\n    ),\n    tap(() => {\n      if (this._routingSpan) {\n        runOutsideAngular(() => {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          this._routingSpan!.end();\n        });\n        this._routingSpan = null;\n      }\n    }),\n  );\n\n  private _routingSpan: Span | null;\n\n  private _subscription: Subscription;\n\n  /**\n   * @see _isPageloadOngoing()\n   */\n  private _pageloadOngoing: boolean;\n\n  public constructor(private readonly _router: Router) {\n    this._routingSpan = null;\n    this._pageloadOngoing = true;\n\n    this._subscription = new Subscription();\n\n    this._subscription.add(this.navStart$.subscribe());\n    this._subscription.add(this.resEnd$.subscribe());\n    this._subscription.add(this.navEnd$.subscribe());\n  }\n\n  /**\n   * This is used to prevent memory leaks when the root view is created and destroyed multiple times,\n   * since `subscribe` callbacks capture `this` and prevent many resources from being GC'd.\n   */\n  public ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n\n  /**\n   * We only _avoid_ creating a navigation root span in one case:\n   *\n   * There is an ongoing pageload span AND the router didn't yet emit the first navigation start event\n   *\n   * The first navigation start event will create the child routing span\n   * and update the pageload root span name on ResolveEnd.\n   *\n   * There's an edge case we need to avoid here: If the router fires the first navigation start event\n   * _after_ the pageload root span finished. This is why we check for the pageload root span.\n   * Possible real-world scenario: Angular application and/or router is bootstrapped after the pageload\n   * idle root span finished\n   *\n   * The overall rationale is:\n   * - if we already avoided creating a navigation root span once, we don't avoid it again\n   *   (i.e. set `_pageloadOngoing` to `false`)\n   * - if `_pageloadOngoing` is already `false`, create a navigation root span\n   * - if there's no active/pageload root span, create a navigation root span\n   * - only if there's an ongoing pageload root span AND `_pageloadOngoing` is still `true,\n   *   don't create a navigation root span\n   */\n  private _isPageloadOngoing(): boolean {\n    if (!this._pageloadOngoing) {\n      // pageload is already finished, no need to update\n      return false;\n    }\n\n    const activeSpan = getActiveSpan();\n    if (!activeSpan) {\n      this._pageloadOngoing = false;\n      return false;\n    }\n\n    const rootSpan = getRootSpan(activeSpan);\n\n    this._pageloadOngoing = spanToJSON(rootSpan).op === 'pageload';\n    return this._pageloadOngoing;\n  }\n}\n\n/**\n * Captures the initialization lifecycle of the component this directive is applied to.\n * Specifically, this directive measures the time between `ngOnInit` and `ngAfterViewInit`\n * of the component.\n *\n * Falls back to the component's selector if no name is provided.\n *\n * @example\n * ```html\n * <app-my-component trace=\"myComponent\"></app-my-component>\n * ```\n */\n@Directive({ selector: '[trace]' })\nexport class TraceDirective implements OnInit, AfterViewInit {\n  @Input('trace') public componentName?: string;\n\n  private _tracingSpan?: Span;\n\n  public constructor(private readonly _host: ElementRef<HTMLElement>) {}\n\n  /**\n   * Implementation of OnInit lifecycle method\n   * @inheritdoc\n   */\n  public ngOnInit(): void {\n    if (!this.componentName) {\n      // Technically, the `trace` binding should always be provided.\n      // However, if it is incorrectly declared on the element without a\n      // value (e.g., `<app-component trace />`), we fall back to using `tagName`\n      // (which is e.g. `APP-COMPONENT`).\n      this.componentName = this._host.nativeElement.tagName.toLowerCase();\n    }\n\n    if (getActiveSpan()) {\n      this._tracingSpan = runOutsideAngular(() =>\n        startInactiveSpan({\n          name: `<${this.componentName}>`,\n          op: ANGULAR_INIT_OP,\n          attributes: { [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.ui.angular.trace_directive' },\n        }),\n      );\n    }\n  }\n\n  /**\n   * Implementation of AfterViewInit lifecycle method\n   * @inheritdoc\n   */\n  public ngAfterViewInit(): void {\n    const span = this._tracingSpan;\n    if (span) {\n      runOutsideAngular(() => span.end());\n    }\n  }\n}\n\n/**\n * A module serves as a single compilation unit for the `TraceDirective` and can be re-used by any other module.\n */\n@NgModule({\n  declarations: [TraceDirective],\n  exports: [TraceDirective],\n})\nexport class TraceModule {}\n\ninterface TraceClassOptions {\n  /**\n   * Name of the class\n   */\n  name?: string;\n}\n\n/**\n * Decorator function that can be used to capture initialization lifecycle of the whole component.\n */\nexport function TraceClass(options?: TraceClassOptions): ClassDecorator {\n  let tracingSpan: Span;\n\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  return target => {\n    const originalOnInit = target.prototype.ngOnInit;\n    target.prototype.ngOnInit = function (...args: unknown[]): ReturnType<typeof originalOnInit> {\n      tracingSpan = runOutsideAngular(() =>\n        startInactiveSpan({\n          onlyIfParent: true,\n          name: `<${options?.name || 'unnamed'}>`,\n          op: ANGULAR_INIT_OP,\n          attributes: {\n            [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.ui.angular.trace_class_decorator',\n          },\n        }),\n      );\n\n      if (originalOnInit) {\n        return originalOnInit.apply(this, args);\n      }\n    };\n\n    const originalAfterViewInit = target.prototype.ngAfterViewInit;\n    target.prototype.ngAfterViewInit = function (...args: unknown[]): ReturnType<typeof originalAfterViewInit> {\n      if (tracingSpan) {\n        runOutsideAngular(() => tracingSpan.end());\n      }\n      if (originalAfterViewInit) {\n        return originalAfterViewInit.apply(this, args);\n      }\n    };\n  };\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n}\n\ninterface TraceMethodOptions {\n  /**\n   * Name of the method (is added to the tracing span)\n   */\n  name?: string;\n}\n\n/**\n * Decorator function that can be used to capture a single lifecycle methods of the component.\n */\nexport function TraceMethod(options?: TraceMethodOptions): MethodDecorator {\n  return (_target: unknown, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n    descriptor.value = function (...args: unknown[]): ReturnType<typeof originalMethod> {\n      const now = timestampInSeconds();\n\n      runOutsideAngular(() => {\n        startInactiveSpan({\n          onlyIfParent: true,\n          name: `<${options?.name ? options.name : 'unnamed'}>`,\n          op: `${ANGULAR_OP}.${String(propertyKey)}`,\n          startTime: now,\n          attributes: {\n            [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.ui.angular.trace_method_decorator',\n          },\n        }).end(now);\n      });\n\n      if (originalMethod) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        return originalMethod.apply(this, args);\n      }\n    };\n    return descriptor;\n  };\n}\n\n/**\n * Takes the parameterized route from a given ActivatedRouteSnapshot and concatenates the snapshot's\n * child route with its parent to produce the complete parameterized URL of the activated route.\n * This happens recursively until the last child (i.e. the end of the URL) is reached.\n *\n * @param route the ActivatedRouteSnapshot of which its path and its child's path is concatenated\n *\n * @returns the concatenated parameterized route string\n */\nexport function getParameterizedRouteFromSnapshot(route?: ActivatedRouteSnapshot | null): string {\n  const parts: string[] = [];\n\n  let currentRoute = route?.firstChild;\n  while (currentRoute) {\n    const path = currentRoute?.routeConfig && currentRoute.routeConfig.path;\n    if (path === null || path === undefined) {\n      break;\n    }\n\n    parts.push(path);\n    currentRoute = currentRoute.firstChild;\n  }\n\n  const fullPath = parts.filter(part => part).join('/');\n  return fullPath ? `/${fullPath}/` : '/';\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["browserInit","originalBrowserTracingIntegration"],"mappings":"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"}