import { VERSION } from '@angular/core';
import { breadcrumbsIntegration, browserSessionIntegration, globalHandlersIntegration, httpContextIntegration, init as browserInit, linkedErrorsIntegration, setContext, } from '@sentry/browser';
import { applySdkMetadata, debug, dedupeIntegration, functionToStringIntegration, inboundFiltersIntegration, } from '@sentry/core';
import { IS_DEBUG_BUILD } from './flags';
/**
 * Get the default integrations for the Angular SDK.
 */
export function getDefaultIntegrations(_options = {}) {
    // Don't include the BrowserApiErrors integration as it interferes with the Angular SDK's `ErrorHandler`:
    // BrowserApiErrors would catch certain errors before they reach the `ErrorHandler` and
    // thus provide a lower fidelity error than what `SentryErrorHandler`
    // (see errorhandler.ts) would provide.
    //
    // see:
    //  - https://github.com/getsentry/sentry-javascript/issues/5417#issuecomment-1453407097
    //  - https://github.com/getsentry/sentry-javascript/issues/2744
    return [
        // TODO(v11): Replace with `eventFiltersIntegration` once we remove the deprecated `inboundFiltersIntegration`
        // eslint-disable-next-line deprecation/deprecation
        inboundFiltersIntegration(),
        functionToStringIntegration(),
        breadcrumbsIntegration(),
        globalHandlersIntegration(),
        linkedErrorsIntegration(),
        dedupeIntegration(),
        httpContextIntegration(),
        browserSessionIntegration(),
    ];
}
/**
 * Inits the Angular SDK
 */
export function init(options) {
    const opts = {
        defaultIntegrations: getDefaultIntegrations(),
        ...options,
    };
    applySdkMetadata(opts, 'angular');
    checkAndSetAngularVersion();
    return browserInit(opts);
}
function checkAndSetAngularVersion() {
    const ANGULAR_MINIMUM_VERSION = 14;
    const angularVersion = VERSION?.major && parseInt(VERSION.major, 10);
    if (angularVersion) {
        if (angularVersion < ANGULAR_MINIMUM_VERSION) {
            IS_DEBUG_BUILD &&
                debug.warn(`This Sentry SDK does not officially support Angular ${angularVersion}.`, `This SDK only supports Angular ${ANGULAR_MINIMUM_VERSION} and above.`, "If you're using lower Angular versions, check the Angular Version Compatibility table in our docs: https://docs.sentry.io/platforms/javascript/guides/angular/#angular-version-compatibility.", 'Otherwise, please consider upgrading your Angular version.');
        }
        setContext('angular', { version: angularVersion });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2RrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Nkay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXhDLE9BQU8sRUFDTCxzQkFBc0IsRUFDdEIseUJBQXlCLEVBQ3pCLHlCQUF5QixFQUN6QixzQkFBc0IsRUFDdEIsSUFBSSxJQUFJLFdBQVcsRUFDbkIsdUJBQXVCLEVBQ3ZCLFVBQVUsR0FDWCxNQUFNLGlCQUFpQixDQUFDO0FBRXpCLE9BQU8sRUFDTCxnQkFBZ0IsRUFDaEIsS0FBSyxFQUNMLGlCQUFpQixFQUNqQiwyQkFBMkIsRUFDM0IseUJBQXlCLEdBQzFCLE1BQU0sY0FBYyxDQUFDO0FBQ3RCLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFekM7O0dBRUc7QUFDSCxNQUFNLFVBQVUsc0JBQXNCLENBQUMsV0FBMkIsRUFBRTtJQUNsRSx5R0FBeUc7SUFDekcsdUZBQXVGO0lBQ3ZGLHFFQUFxRTtJQUNyRSx1Q0FBdUM7SUFDdkMsRUFBRTtJQUNGLE9BQU87SUFDUCx3RkFBd0Y7SUFDeEYsZ0VBQWdFO0lBQ2hFLE9BQU87UUFDTCw4R0FBOEc7UUFDOUcsbURBQW1EO1FBQ25ELHlCQUF5QixFQUFFO1FBQzNCLDJCQUEyQixFQUFFO1FBQzdCLHNCQUFzQixFQUFFO1FBQ3hCLHlCQUF5QixFQUFFO1FBQzNCLHVCQUF1QixFQUFFO1FBQ3pCLGlCQUFpQixFQUFFO1FBQ25CLHNCQUFzQixFQUFFO1FBQ3hCLHlCQUF5QixFQUFFO0tBQzVCLENBQUM7QUFDSixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsSUFBSSxDQUFDLE9BQXVCO0lBQzFDLE1BQU0sSUFBSSxHQUFHO1FBQ1gsbUJBQW1CLEVBQUUsc0JBQXNCLEVBQUU7UUFDN0MsR0FBRyxPQUFPO0tBQ1gsQ0FBQztJQUVGLGdCQUFnQixDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztJQUVsQyx5QkFBeUIsRUFBRSxDQUFDO0lBQzVCLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNCLENBQUM7QUFFRCxTQUFTLHlCQUF5QjtJQUNoQyxNQUFNLHVCQUF1QixHQUFHLEVBQUUsQ0FBQztJQUVuQyxNQUFNLGNBQWMsR0FBRyxPQUFPLEVBQUUsS0FBSyxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRXJFLElBQUksY0FBYyxFQUFFO1FBQ2xCLElBQUksY0FBYyxHQUFHLHVCQUF1QixFQUFFO1lBQzVDLGNBQWM7Z0JBQ1osS0FBSyxDQUFDLElBQUksQ0FDUix1REFBdUQsY0FBYyxHQUFHLEVBQ3hFLGtDQUFrQyx1QkFBdUIsYUFBYSxFQUN0RSwrTEFBK0wsRUFDL0wsNERBQTRELENBQzdELENBQUM7U0FDTDtRQUNELFVBQVUsQ0FBQyxTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztLQUNwRDtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWRVJTSU9OIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgdHlwZSB7IEJyb3dzZXJPcHRpb25zIH0gZnJvbSAnQHNlbnRyeS9icm93c2VyJztcbmltcG9ydCB7XG4gIGJyZWFkY3J1bWJzSW50ZWdyYXRpb24sXG4gIGJyb3dzZXJTZXNzaW9uSW50ZWdyYXRpb24sXG4gIGdsb2JhbEhhbmRsZXJzSW50ZWdyYXRpb24sXG4gIGh0dHBDb250ZXh0SW50ZWdyYXRpb24sXG4gIGluaXQgYXMgYnJvd3NlckluaXQsXG4gIGxpbmtlZEVycm9yc0ludGVncmF0aW9uLFxuICBzZXRDb250ZXh0LFxufSBmcm9tICdAc2VudHJ5L2Jyb3dzZXInO1xuaW1wb3J0IHR5cGUgeyBDbGllbnQsIEludGVncmF0aW9uIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7XG4gIGFwcGx5U2RrTWV0YWRhdGEsXG4gIGRlYnVnLFxuICBkZWR1cGVJbnRlZ3JhdGlvbixcbiAgZnVuY3Rpb25Ub1N0cmluZ0ludGVncmF0aW9uLFxuICBpbmJvdW5kRmlsdGVyc0ludGVncmF0aW9uLFxufSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgSVNfREVCVUdfQlVJTEQgfSBmcm9tICcuL2ZsYWdzJztcblxuLyoqXG4gKiBHZXQgdGhlIGRlZmF1bHQgaW50ZWdyYXRpb25zIGZvciB0aGUgQW5ndWxhciBTREsuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0SW50ZWdyYXRpb25zKF9vcHRpb25zOiBCcm93c2VyT3B0aW9ucyA9IHt9KTogSW50ZWdyYXRpb25bXSB7XG4gIC8vIERvbid0IGluY2x1ZGUgdGhlIEJyb3dzZXJBcGlFcnJvcnMgaW50ZWdyYXRpb24gYXMgaXQgaW50ZXJmZXJlcyB3aXRoIHRoZSBBbmd1bGFyIFNESydzIGBFcnJvckhhbmRsZXJgOlxuICAvLyBCcm93c2VyQXBpRXJyb3JzIHdvdWxkIGNhdGNoIGNlcnRhaW4gZXJyb3JzIGJlZm9yZSB0aGV5IHJlYWNoIHRoZSBgRXJyb3JIYW5kbGVyYCBhbmRcbiAgLy8gdGh1cyBwcm92aWRlIGEgbG93ZXIgZmlkZWxpdHkgZXJyb3IgdGhhbiB3aGF0IGBTZW50cnlFcnJvckhhbmRsZXJgXG4gIC8vIChzZWUgZXJyb3JoYW5kbGVyLnRzKSB3b3VsZCBwcm92aWRlLlxuICAvL1xuICAvLyBzZWU6XG4gIC8vICAtIGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5LWphdmFzY3JpcHQvaXNzdWVzLzU0MTcjaXNzdWVjb21tZW50LTE0NTM0MDcwOTdcbiAgLy8gIC0gaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvMjc0NFxuICByZXR1cm4gW1xuICAgIC8vIFRPRE8odjExKTogUmVwbGFjZSB3aXRoIGBldmVudEZpbHRlcnNJbnRlZ3JhdGlvbmAgb25jZSB3ZSByZW1vdmUgdGhlIGRlcHJlY2F0ZWQgYGluYm91bmRGaWx0ZXJzSW50ZWdyYXRpb25gXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgaW5ib3VuZEZpbHRlcnNJbnRlZ3JhdGlvbigpLFxuICAgIGZ1bmN0aW9uVG9TdHJpbmdJbnRlZ3JhdGlvbigpLFxuICAgIGJyZWFkY3J1bWJzSW50ZWdyYXRpb24oKSxcbiAgICBnbG9iYWxIYW5kbGVyc0ludGVncmF0aW9uKCksXG4gICAgbGlua2VkRXJyb3JzSW50ZWdyYXRpb24oKSxcbiAgICBkZWR1cGVJbnRlZ3JhdGlvbigpLFxuICAgIGh0dHBDb250ZXh0SW50ZWdyYXRpb24oKSxcbiAgICBicm93c2VyU2Vzc2lvbkludGVncmF0aW9uKCksXG4gIF07XG59XG5cbi8qKlxuICogSW5pdHMgdGhlIEFuZ3VsYXIgU0RLXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0KG9wdGlvbnM6IEJyb3dzZXJPcHRpb25zKTogQ2xpZW50IHwgdW5kZWZpbmVkIHtcbiAgY29uc3Qgb3B0cyA9IHtcbiAgICBkZWZhdWx0SW50ZWdyYXRpb25zOiBnZXREZWZhdWx0SW50ZWdyYXRpb25zKCksXG4gICAgLi4ub3B0aW9ucyxcbiAgfTtcblxuICBhcHBseVNka01ldGFkYXRhKG9wdHMsICdhbmd1bGFyJyk7XG5cbiAgY2hlY2tBbmRTZXRBbmd1bGFyVmVyc2lvbigpO1xuICByZXR1cm4gYnJvd3NlckluaXQob3B0cyk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrQW5kU2V0QW5ndWxhclZlcnNpb24oKTogdm9pZCB7XG4gIGNvbnN0IEFOR1VMQVJfTUlOSU1VTV9WRVJTSU9OID0gMTQ7XG5cbiAgY29uc3QgYW5ndWxhclZlcnNpb24gPSBWRVJTSU9OPy5tYWpvciAmJiBwYXJzZUludChWRVJTSU9OLm1ham9yLCAxMCk7XG5cbiAgaWYgKGFuZ3VsYXJWZXJzaW9uKSB7XG4gICAgaWYgKGFuZ3VsYXJWZXJzaW9uIDwgQU5HVUxBUl9NSU5JTVVNX1ZFUlNJT04pIHtcbiAgICAgIElTX0RFQlVHX0JVSUxEICYmXG4gICAgICAgIGRlYnVnLndhcm4oXG4gICAgICAgICAgYFRoaXMgU2VudHJ5IFNESyBkb2VzIG5vdCBvZmZpY2lhbGx5IHN1cHBvcnQgQW5ndWxhciAke2FuZ3VsYXJWZXJzaW9ufS5gLFxuICAgICAgICAgIGBUaGlzIFNESyBvbmx5IHN1cHBvcnRzIEFuZ3VsYXIgJHtBTkdVTEFSX01JTklNVU1fVkVSU0lPTn0gYW5kIGFib3ZlLmAsXG4gICAgICAgICAgXCJJZiB5b3UncmUgdXNpbmcgbG93ZXIgQW5ndWxhciB2ZXJzaW9ucywgY2hlY2sgdGhlIEFuZ3VsYXIgVmVyc2lvbiBDb21wYXRpYmlsaXR5IHRhYmxlIGluIG91ciBkb2NzOiBodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9hbmd1bGFyLyNhbmd1bGFyLXZlcnNpb24tY29tcGF0aWJpbGl0eS5cIixcbiAgICAgICAgICAnT3RoZXJ3aXNlLCBwbGVhc2UgY29uc2lkZXIgdXBncmFkaW5nIHlvdXIgQW5ndWxhciB2ZXJzaW9uLicsXG4gICAgICAgICk7XG4gICAgfVxuICAgIHNldENvbnRleHQoJ2FuZ3VsYXInLCB7IHZlcnNpb246IGFuZ3VsYXJWZXJzaW9uIH0pO1xuICB9XG59XG4iXX0=